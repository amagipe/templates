To write a unit test that mocks a variable within a function that is part of a class, you can use the `patch` function from the `unittest.mock` module. This allows you to temporarily replace the value of a variable in the context of your test.

Let's assume you have a class `MyClass` with a method `process_data` that relies on an external configuration variable `config_value`:

```python
class MyClass:
    def __init__(self):
        self.config_value = 42  # This is the variable we want to mock in the test

    def process_data(self, data):
        return data * self.config_value
```

### Unit Test with Mocked Variable

Hereâ€™s how you can write a unit test for this method, mocking the `config_value` variable:

```python
import unittest
from unittest.mock import patch
from your_module import MyClass  # Replace 'your_module' with the actual module name

class TestMyClass(unittest.TestCase):

    @patch.object(MyClass, 'config_value', 100)  # Mocking the config_value to be 100
    def test_process_data_with_mocked_variable(self):
        # Instantiate the class
        obj = MyClass()

        # Call the method with some data
        result = obj.process_data(10)
        
        # Assert the results
        self.assertEqual(result, 1000)  # 10 * 100 = 1000

if __name__ == '__main__':
    unittest.main()
```

### Explanation:

1. **Patching the Variable**:
   - The `@patch.object(MyClass, 'config_value', 100)` decorator is used to temporarily replace the `config_value` attribute of `MyClass` with the value `100` for the duration of the test.

2. **Running the Test**:
   - The `test_process_data_with_mocked_variable` method tests the `process_data` function by verifying that the `config_value` is correctly mocked to `100`. The function should return `1000` when `data` is `10` (because `10 * 100 = 1000`).

3. **Assertion**:
   - The `assertEqual(result, 1000)` checks that the result of `process_data(10)` is indeed `1000`, confirming that the variable `config_value` was correctly mocked during the test.

This approach ensures that the `config_value` is replaced only during the test, and the original value is restored afterward, providing isolation and preventing side effects on other tests.