Writing a unit test for a `try-except` block involves verifying both the successful execution (when no exception is raised) and the exception handling (when an exception is raised).

Letâ€™s assume you have a class `MyClass` with a method `process_data` that handles an exception using a `try-except` block.

### Example Code with a `try-except` Block

```python
# my_module.py

from config_loader import load_config

class MyClass:
    def process_data(self, data):
        try:
            config_value = load_config('multiplier')
            result = data * config_value
        except ValueError as e:
            print(f"An error occurred: {e}")
            result = None
        return result
```

### Unit Test for the `try-except` Block

You want to test two scenarios:
1. **When `load_config` succeeds without raising an exception.**
2. **When `load_config` raises a `ValueError` and the exception is properly handled.**

```python
# test_my_module.py

import unittest
from unittest.mock import patch
from my_module import MyClass

class TestMyClass(unittest.TestCase):

    @patch('my_module.load_config', return_value=100)
    def test_process_data_success(self, mock_load_config):
        # Test the success case where no exception is raised
        obj = MyClass()
        result = obj.process_data(10)
        
        self.assertEqual(result, 1000)  # 10 * 100 = 1000
        mock_load_config.assert_called_once_with('multiplier')

    @patch('my_module.load_config', side_effect=ValueError("Invalid config"))
    def test_process_data_exception(self, mock_load_config):
        # Test the exception handling case
        obj = MyClass()
        result = obj.process_data(10)
        
        self.assertIsNone(result)  # Expecting None due to exception handling
        mock_load_config.assert_called_once_with('multiplier')

if __name__ == '__main__':
    unittest.main()
```

### Explanation:

1. **Test for Successful Execution (`test_process_data_success`)**:
   - The `@patch('my_module.load_config', return_value=100)` decorator mocks `load_config` to return `100` without raising an exception.
   - The test verifies that `process_data(10)` returns `1000` (since `10 * 100 = 1000`).

2. **Test for Exception Handling (`test_process_data_exception`)**:
   - The `@patch('my_module.load_config', side_effect=ValueError("Invalid config"))` decorator mocks `load_config` to raise a `ValueError` when called.
   - The test verifies that `process_data(10)` returns `None` because of the exception handling in the `try-except` block.
   - The `side_effect` parameter in `patch` allows you to specify an exception that will be raised when the mocked function is called.

### Running the Tests:

You can run the tests with:

```bash
python test_my_module.py
```

These tests ensure that your `try-except` block in `process_data` is correctly handling both normal and exceptional conditions.